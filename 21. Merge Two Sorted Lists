21. Merge Two Sorted Lists

using System;

public class ListNode {
    public int val;
    public ListNode next;
    public ListNode(int val=0, ListNode next=null) {
        this.val = val;
        this.next = next;
    }
}

public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null || list2 == null)
            return list1 ?? list2;
        if (list1.val > list2.val)
            (list1, list2) = (list2, list1);
        list1.next = MergeTwoLists(list1.next, list2);
        return list1;
    }
}


// for your practice

using System;

public class ListNode {
    public int val;
    public ListNode next;
    public ListNode(int val=0, ListNode next=null) {
        this.val = val;
        this.next = next;
    }
}

public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null || list2 == null)
            return list1 ?? list2;
        if (list1.val > list2.val)
            (list1, list2) = (list2, list1);
        list1.next = MergeTwoLists(list1.next, list2);
        return list1;
    }
}

public class Program
{
    // Helper to build a linked list from an array
    public static ListNode BuildList(int[] arr)
    {
        ListNode dummy = new ListNode();
        ListNode current = dummy;
        foreach (int val in arr)
        {
            current.next = new ListNode(val);
            current = current.next;
        }
        return dummy.next;
    }

    // Helper to print a linked list
    public static void PrintList(ListNode head)
    {
        while (head != null)
        {
            Console.Write(head.val);
            if (head.next != null)
                Console.Write(" -> ");
            head = head.next;
        }
        Console.WriteLine();
    }

    public static void Main(string[] args)
    {
        Solution sol = new Solution();

        // Test case 1
        ListNode list1 = BuildList(new int[] { 1, 2, 4 });
        ListNode list2 = BuildList(new int[] { 1, 3, 4 });

        Console.WriteLine("List 1:");
        PrintList(list1);
        Console.WriteLine("List 2:");
        PrintList(list2);

        ListNode merged = sol.MergeTwoLists(list1, list2);

        Console.WriteLine("Merged List:");
        PrintList(merged);

        // Additional test case
        ListNode list3 = BuildList(new int[] { });
        ListNode list4 = BuildList(new int[] { 0 });

        Console.WriteLine("\nList 3:");
        PrintList(list3);
        Console.WriteLine("List 4:");
        PrintList(list4);

        ListNode merged2 = sol.MergeTwoLists(list3, list4);

        Console.WriteLine("Merged List:");
        PrintList(merged2);
    }
}


// output

List 1:
1 -> 2 -> 4
List 2:
1 -> 3 -> 4
Merged List:
1 -> 1 -> 2 -> 3 -> 4 -> 4

List 3:

List 4:
0
Merged List:
0
