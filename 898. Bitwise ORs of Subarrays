Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.

The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: arr = [0]
Output: 1
Explanation: There is only one possible result: 0.
Example 2:

Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
These yield the results 1, 1, 2, 1, 3, 3.
There are 3 unique values, so the answer is 3.
Example 3:

Input: arr = [1,2,4]
Output: 6
Explanation: The possible results are 1, 2, 3, 4, 6, and 7.
 

Constraints:

1 <= arr.length <= 5 * 104
0 <= arr[i] <= 109

// leetcode answer

public class Solution {
    public int SubarrayBitwiseORs(int[] arr) {
        List<int> s = new List<int>();
        int l = 0;

        foreach (int a in arr) {
            int r = s.Count;
            s.Add(a);
            // s[l..r) are values generated in the previous iteration
            for (int i = l; i < r; ++i)
                if (s[s.Count - 1] != (s[i] | a))
                    s.Add(s[i] | a);
            l = r;
        }

        return new HashSet<int>(s).Count;
    }
}



// with main function 

using System;
using System.Collections.Generic;

public class Program
{
    public static void Main()
    {
        int[] arr = { 1, 2, 4 }; // Example input
        Solution sol = new Solution();
        int result = sol.SubarrayBitwiseORs(arr);
        Console.WriteLine("Count of distinct bitwise ORs of subarrays: " + result);
    }
}

public class Solution
{
    public int SubarrayBitwiseORs(int[] arr)
    {
        List<int> s = new List<int>();
        int l = 0;

        foreach (int a in arr)
        {
            int r = s.Count;
            s.Add(a);
            for (int i = l; i < r; ++i)
                if (s[s.Count - 1] != (s[i] | a))
                    s.Add(s[i] | a);
            l = r;
        }

        return new HashSet<int>(s).Count;
    }
}
