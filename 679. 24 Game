You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.

You are restricted with the following rules:

The division operator '/' represents real division, not integer division.
For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
You cannot concatenate numbers together
For example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
Return true if you can get such expression that evaluates to 24, and false otherwise.

 

Example 1:

Input: cards = [4,1,8,7]
Output: true
Explanation: (8-4) * (7-1) = 24
Example 2:

Input: cards = [1,2,1,2]
Output: false
 

Constraints:

cards.length == 4
1 <= cards[i] <= 9

// leetcode   answer 



public class Solution {
    public bool JudgePoint24(int[] nums) {
        List<double> doubleNums = new List<double>();

        foreach (int num in nums)
            doubleNums.Add(num);

        return Dfs(doubleNums);
    }

    private bool Dfs(List<double> nums) {
        if (nums.Count == 1)
            return Math.Abs(nums[0] - 24) < 0.001;

        for (int i = 0; i < nums.Count; ++i)
            for (int j = 0; j < i; ++j) {
                foreach (double num in Generate(nums[i], nums[j])) {
                    List<double> nextRound = new List<double> { num };
                    for (int k = 0; k < nums.Count; ++k) {
                        if (k == i || k == j)  // It is used in `Generate()`.
                            continue;
                        nextRound.Add(nums[k]);
                    }
                    if (Dfs(nextRound))
                        return true;
                }
            }

        return false;
    }

    private List<double> Generate(double a, double b) {
        return new List<double> { a * b, a / b, b / a, a + b, a - b, b - a };
    }
}


// answer with main function 
using System;
using System.Collections.Generic;

public class Solution {
    public bool JudgePoint24(int[] nums) {
        List<double> doubleNums = new List<double>();

        foreach (int num in nums)
            doubleNums.Add(num);

        return Dfs(doubleNums);
    }

    private bool Dfs(List<double> nums) {
        if (nums.Count == 1)
            return Math.Abs(nums[0] - 24) < 0.001;

        for (int i = 0; i < nums.Count; ++i)
            for (int j = 0; j < i; ++j) {
                foreach (double num in Generate(nums[i], nums[j])) {
                    List<double> nextRound = new List<double> { num };
                    for (int k = 0; k < nums.Count; ++k) {
                        if (k == i || k == j) // already used
                            continue;
                        nextRound.Add(nums[k]);
                    }
                    if (Dfs(nextRound))
                        return true;
                }
            }

        return false;
    }

    private List<double> Generate(double a, double b) {
        return new List<double> { a * b, a / b, b / a, a + b, a - b, b - a };
    }
}

public class Program {
    public static void Main() {
        Solution sol = new Solution();

        int[] nums1 = { 4, 1, 8, 7 }; // Example -> true (8 * (3) = 24)
        int[] nums2 = { 1, 2, 1, 2 }; // Example -> false

        Console.WriteLine($"[4,1,8,7] => {sol.JudgePoint24(nums1)}");
        Console.WriteLine($"[1,2,1,2] => {sol.JudgePoint24(nums2)}");
    }
}


// output
[4,1,8,7] => True
[1,2,1,2] => False

