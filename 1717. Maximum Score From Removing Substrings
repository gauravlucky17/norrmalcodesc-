
You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.


// leetcode answer


public class Solution {
    public int MaximumGain(string s, int x, int y) {
        return x > y ? Gain(s, "ab", x, "ba", y) : Gain(s, "ba", y, "ab", x);
    }

    private int Gain(string s, string sub1, int point1, string sub2, int point2) {
        int points = 0;
        var stack1 = new List<char>();
        var stack2 = new List<char>();

        // Remove "sub1" from s with point1 gain.
        foreach (char c in s) {
            if (stack1.Count > 0 && stack1[stack1.Count - 1] == sub1[0] && c == sub1[1]) {
                stack1.RemoveAt(stack1.Count - 1);
                points += point1;
            } else {
                stack1.Add(c);
            }
        }

        // Remove "sub2" from s with point2 gain.
        foreach (char c in stack1) {
            if (stack2.Count > 0 && stack2[stack2.Count - 1] == sub2[0] && c == sub2[1]) {
                stack2.RemoveAt(stack2.Count - 1);
                points += point2;
            } else {
                stack2.Add(c);
            }
        }

        return points;
    }
}



// with main function

using System;
using System.Collections.Generic;

public class Solution {
    public int MaximumGain(string s, int x, int y) {
        return x > y ? Gain(s, "ab", x, "ba", y) : Gain(s, "ba", y, "ab", x);
    }

    private int Gain(string s, string sub1, int point1, string sub2, int point2) {
        int points = 0;
        var stack1 = new List<char>();
        var stack2 = new List<char>();

        // Remove "sub1" from s with point1 gain.
        foreach (char c in s) {
            if (stack1.Count > 0 && stack1[stack1.Count - 1] == sub1[0] && c == sub1[1]) {
                stack1.RemoveAt(stack1.Count - 1);
                points += point1;
            } else {
                stack1.Add(c);
            }
        }

        // Remove "sub2" from s with point2 gain.
        foreach (char c in stack1) {
            if (stack2.Count > 0 && stack2[stack2.Count - 1] == sub2[0] && c == sub2[1]) {
                stack2.RemoveAt(stack2.Count - 1);
                points += point2;
            } else {
                stack2.Add(c);
            }
        }

        return points;
    }
}

// Sample Main method to run the code
public class Program {
    public static void Main(string[] args) {
        Solution sol = new Solution();

        string s = "cdbcbbaaabab";
        int x = 4, y = 5;

        int result = sol.MaximumGain(s, x, y);
        Console.WriteLine("Maximum Gain: " + result);  // Output depends on logic
    }
}


output:  Maximum Gain: 19
